{"version":3,"file":null,"sources":["/Users/acarlin/Documents/dev/ngTagsInput/src/constants.js","/Users/acarlin/Documents/dev/ngTagsInput/src/tags-input.js","/Users/acarlin/Documents/dev/ngTagsInput/src/tag-item.js","/Users/acarlin/Documents/dev/ngTagsInput/src/auto-complete.js","/Users/acarlin/Documents/dev/ngTagsInput/src/auto-complete-match.js","/Users/acarlin/Documents/dev/ngTagsInput/src/autosize.js","/Users/acarlin/Documents/dev/ngTagsInput/src/bind-attrs.js","/Users/acarlin/Documents/dev/ngTagsInput/src/transclude-append.js","/Users/acarlin/Documents/dev/ngTagsInput/src/configuration.js","/Users/acarlin/Documents/dev/ngTagsInput/src/util.js","/Users/acarlin/Documents/dev/ngTagsInput/build/tmp/compiled-templates.js","/Users/acarlin/Documents/dev/ngTagsInput/src/init.js"],"sourcesContent":["export default {\n  KEYS: {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    left: 37,\n    right: 39,\n    delete: 46,\n    comma: 188\n  },\n  MAX_SAFE_INTEGER: 9007199254740991,\n  SUPPORTED_INPUT_TYPES: ['text', 'email', 'url']\n};\n\n","/**\n * @ngdoc directive\n * @name tagsInput\n * @module ngTagsInput\n *\n * @description\n * Renders an input box with tag editing support.\n *\n * @param {string} ngModel Assignable Angular expression to data-bind to.\n * @param {boolean=} [useStrings=false] Flag indicating that the model is an array of strings (EXPERIMENTAL).\n * @param {string=} [template=NA] URL or id of a custom template for rendering each tag.\n * @param {string=} [templateScope=NA] Scope to be passed to custom templates - of both tagsInput and\n *    autoComplete directives - as $scope.\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\n * @param {string=} [text=NA] Assignable Angular expression for data-binding to the element's text.\n * @param {number=} tabindex Tab order of the control.\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n * @param {number=} [minLength=3] Minimum length for a new tag.\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater\n *    than maxTags.\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n *    the input element when the directive loses focus.\n * @param {string=} [removeTagSymbol=Ã—] (Obsolete) Symbol character for the remove tag button.\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into the new tag\n *    input box instead of being removed when the backspace key is pressed and the input box is empty.\n * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list\n *    will be allowed. When this flag is true, addOnEnter, addOnComma, addOnSpace and addOnBlur values are ignored.\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\n * @param {expression=} [tagClass=NA] Expression to evaluate for each existing tag in order to get the CSS classes to be used.\n *    The expression is provided with the current tag as $tag, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n * @param {expression=} [onTagAdding=NA] Expression to evaluate that will be invoked before adding a new tag. The new\n *    tag is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be added.\n * @param {expression=} [onTagAdded=NA] Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n * @param {expression=} [onInvalidTag=NA] Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\n * @param {expression=} [onTagRemoving=NA] Expression to evaluate that will be invoked before removing a tag. The tag\n *    is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be removed.\n * @param {expression=} [onTagRemoved=NA] Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n * @param {expression=} [onTagClicked=NA] Expression to evaluate upon clicking an existing tag. The clicked tag is available as $tag.\n * @param {boolean=} [dragtag=false] Whether or not the labels can be dragged to be ordered differently\n * @param {expression=} [onTagDragged=NA] Expression to evaluate upon a dropping a dragged tag. The clicked tag is available as $tag.\n * \n */\nexport default function TagsInputDirective($timeout, $document, $window, $q, tagsInputConfig, tiUtil, tiConstants) {\n  'ngInject';\n\n  function TagList(options, events, onTagAdding, onTagRemoving) {\n    let self = {};\n\n    let getTagText = tag =>tiUtil.safeToString(tag[options.displayProperty]);\n    let setTagText = (tag, text) => {\n      tag[options.displayProperty] = text;\n    };\n\n    let canAddTag = tag => {\n      let tagText = getTagText(tag);\n      let valid = tagText &&\n                  tagText.length >= options.minLength &&\n                  tagText.length <= options.maxLength &&\n                  options.allowedTagsPattern.test(tagText) &&\n                  !tiUtil.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty);\n\n      return $q.when(valid && onTagAdding({ $tag: tag })).then(tiUtil.promisifyValue);\n    };\n\n    let canRemoveTag = tag => $q.when(onTagRemoving({ $tag: tag })).then(tiUtil.promisifyValue);\n\n    self.items = [];\n\n    self.addText = text => {\n      let tag = {};\n      setTagText(tag, text);\n      return self.add(tag);\n    };\n\n    self.add = tag => {\n      let tagText = getTagText(tag);\n\n      if (options.replaceSpacesWithDashes) {\n        tagText = tiUtil.replaceSpacesWithDashes(tagText);\n      }\n\n      setTagText(tag, tagText);\n\n      return canAddTag(tag)\n        .then(() =>{\n          self.items.push(tag);\n          events.trigger('tag-added', { $tag: tag });\n        })\n        .catch(() => {\n          if (tagText) {\n            events.trigger('invalid-tag', { $tag: tag });\n          }\n        });\n    };\n\n    self.remove = index => {\n      let tag = self.items[index];\n      return canRemoveTag(tag).then(() => {\n        self.items.splice(index, 1);\n        self.clearSelection();\n        events.trigger('tag-removed', { $tag: tag });\n        return tag;\n      });\n    };\n\n    self.reorder = (prevOffset, newOffset) => {\n      if(prevOffset<0 || newOffset<0 || prevOffset > self.items.length || newOffset > self.items.length || prevOffset==newOffset) return;\n      self.items.splice(newOffset, 0, self.items.splice(prevOffset, 1)[0]);\n      self.clearSelection();\n      events.trigger('tag-dragged');\n    };\n\n    self.select = index => {\n      if (index < 0) {\n        index = self.items.length - 1;\n      }\n      else if (index >= self.items.length) {\n        index = 0;\n      }\n\n      self.index = index;\n      self.selected = self.items[index];\n    };\n\n    self.selectPrior = () => {\n      self.select(--self.index);\n    };\n\n    self.selectNext = () => {\n      self.select(++self.index);\n    };\n\n    self.removeSelected = () => self.remove(self.index);\n\n    self.clearSelection = () => {\n      self.selected = null;\n      self.index = -1;\n    };\n\n    self.getItems = () => options.useStrings ? self.items.map(getTagText) : self.items;\n\n    self.clearSelection();\n\n    return self;\n  }\n\n  function validateType(type) {\n    return tiConstants.SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\n  }\n\n  return {\n    restrict: 'E',\n    require: 'ngModel',\n    scope: {\n      tags: '=ngModel',\n      text: '=?',\n      templateScope: '=?',\n      tagClass: '&',\n      onTagAdding: '&',\n      onTagAdded: '&',\n      onInvalidTag: '&',\n      onTagRemoving: '&',\n      onTagRemoved: '&',\n      onTagClicked: '&',\n      onTagDragged: '&'\n    },\n    replace: false,\n    transclude: true,\n    templateUrl: 'ngTagsInput/tags-input.html',\n    controller($scope, $element, $attrs) {\n      'ngInject';\n\n      $scope.events = tiUtil.simplePubSub();\n\n      $scope.options = tagsInputConfig.load('tagsInput', $element, $attrs, $scope.events, {\n        template: [String, 'ngTagsInput/tag-item.html'],\n        type: [String, 'text', validateType],\n        placeholder: [String, 'Add a tag'],\n        tabindex: [Number, null],\n        removeTagSymbol: [String, String.fromCharCode(215)],\n        replaceSpacesWithDashes: [Boolean, true],\n        minLength: [Number, 3],\n        maxLength: [Number, tiConstants.MAX_SAFE_INTEGER],\n        addOnEnter: [Boolean, true],\n        addOnSpace: [Boolean, false],\n        addOnComma: [Boolean, true],\n        addOnBlur: [Boolean, true],\n        addOnPaste: [Boolean, false],\n        pasteSplitPattern: [RegExp, /,/],\n        allowedTagsPattern: [RegExp, /.+/],\n        enableEditingLastTag: [Boolean, false],\n        minTags: [Number, 0],\n        maxTags: [Number, tiConstants.MAX_SAFE_INTEGER],\n        displayProperty: [String, 'text'],\n        keyProperty: [String, ''],\n        allowLeftoverText: [Boolean, false],\n        addFromAutocompleteOnly: [Boolean, false],\n        spellcheck: [Boolean, true],\n        useStrings: [Boolean, false],\n        dragtag: [Boolean, false]\n      });\n\n      $scope.tagList = new TagList($scope.options, $scope.events,\n        tiUtil.handleUndefinedResult($scope.onTagAdding, true),\n        tiUtil.handleUndefinedResult($scope.onTagRemoving, true));\n\n      this.registerAutocomplete = () => ({\n        addTag: function(tag) {\n          return $scope.tagList.add(tag);\n        },\n        getTags: function() {\n          return $scope.tagList.items;\n        },\n        getCurrentTagText: function() {\n          return $scope.newTag.text();\n        },\n        getOptions: function() {\n          return $scope.options;\n        },\n        getTemplateScope: function() {\n          return $scope.templateScope;\n        },\n        on: function(name, handler) {\n          $scope.events.on(name, handler, true);\n          return this;\n        }\n      });\n\n      this.registerTagItem = () => ({\n        getOptions: function () {\n          return $scope.options;\n        },\n        removeTag: function (index) {\n          if ($scope.disabled) {\n            return;\n          }\n          $scope.tagList.remove(index);\n        }\n      });\n    },\n    link(scope, element, attrs, ngModelCtrl) {\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.comma, tiConstants.KEYS.space, tiConstants.KEYS.backspace,\n        tiConstants.KEYS.delete, tiConstants.KEYS.left, tiConstants.KEYS.right];\n      let tagList = scope.tagList;\n      let events = scope.events;\n      let options = scope.options;\n      let input = element.find('input');\n      let validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'];\n\n      let setElementValidity = () => {\n        ngModelCtrl.$setValidity('maxTags', tagList.items.length <= options.maxTags);\n        ngModelCtrl.$setValidity('minTags', tagList.items.length >= options.minTags);\n        ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text());\n      };\n\n      let focusInput = () => {\n        $timeout(() => { input[0].focus(); });\n      };\n\n      ngModelCtrl.$isEmpty = value => !value || !value.length;\n\n      scope.newTag = {\n        text(value) {\n          if (angular.isDefined(value)) {\n            scope.text = value;\n            events.trigger('input-change', value);\n          }\n          else {\n            return scope.text || '';\n          }\n        },\n        invalid: null\n      };\n\n      scope.track = tag => tag[options.keyProperty || options.displayProperty];\n\n      scope.getTagClass = (tag, index) => {\n        let selected = tag === tagList.selected;\n        var ret = [\n          scope.tagClass({$tag: tag, $index: index, $selected: selected}),\n                    { selected: selected }\n        ];\n        if(options.dragtag)ret.push('tag-item-dragtag')\n        return ret;\n      };\n\n      scope.$watch('tags', value => {\n        if (value) {\n          tagList.items = tiUtil.makeObjectArray(value, options.displayProperty);\n          if (options.useStrings) {\n            return;\n          }\n\n          scope.tags = tagList.items;\n        }\n        else {\n          tagList.items = [];\n        }\n      });\n\n      scope.$watch('tags.length', () => {\n        setElementValidity();\n\n        // ngModelController won't trigger validators when the model changes (because it's an array),\n        // so we need to do it ourselves. Unfortunately this won't trigger any registered formatter.\n        ngModelCtrl.$validate();\n      });\n\n      attrs.$observe('disabled', value => {\n        scope.disabled = value;\n      });\n\n      scope.eventHandlers = {\n        input: {\n          keydown($event) {\n            events.trigger('input-keydown', $event);\n          },\n          focus() {\n            if (scope.hasFocus) {\n              return;\n            }\n\n            scope.hasFocus = true;\n            events.trigger('input-focus');\n          },\n          blur() {\n            $timeout(() => {\n              let activeElement = $document.prop('activeElement');\n              let lostFocusToBrowserWindow = activeElement === input[0];\n              let lostFocusToChildElement = element[0].contains(activeElement);\n\n              if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                scope.hasFocus = false;\n                events.trigger('input-blur');\n              }\n            });\n          },\n          paste($event) {\n            $event.getTextData = () => {\n              let clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\n              return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\n            };\n            events.trigger('input-paste', $event);\n          }\n        },\n        host: {\n          click() {\n            if (scope.disabled) {\n              return;\n            }\n            focusInput();\n          },\n          mousemove(event){\n            if(options.dragtag && scope.draggedElement){\n              var zoomFactor =  window.innerWidth / window.outerWidth//accounting for browser zoom in/out\n              scope.draggedElement.elem.style.left=zoomFactor*(event.screenX - scope.draggedElement.x)+'px';\n              scope.draggedElement.elem.style.top=zoomFactor*(event.screenY - scope.draggedElement.y)+'px';\n            }\n          }\n        },\n        tag: {\n          click(tag) {\n            events.trigger('tag-clicked', { $tag: tag });\n          },\n          mousedown(event){\n            if(options.dragtag){\n              var target = event.target || event.srcElement || event.currentTarget;\n              if(target.tagName=='A')return;//if you hit the A, don't do this \n              while(target.tagName!='LI')target = target.parentElement  //go up parents until you find the LI\n              target.style.position='relative';\n              scope.draggedElement = {'elem':target,'x':event.screenX,'y':event.screenY}\n\n              //console.log('pick up element at '+scope.draggedElement.x+\" \"+scope.draggedElement.y)\n\n              event.preventDefault();\n              event.stopImmediatePropagation();\n            }\n          },\n          mouseup(event){\n            if(options.dragtag && scope.draggedElement){\n              //console.log('put down element at '+event.screenX+\" \"+event.screenY)\n\n              var listHolder = scope.draggedElement.elem.parentElement\n              var allElems = listHolder.getElementsByTagName(\"LI\")\n              var prevOffset = -1;\n              var newOffset = -1;\n\n               //find elem's offset\n              for(var i=0;i<allElems.length;i++){\n                if(allElems[i].style.position=='relative')\n                  prevOffset = i;\n              }\n\n\n              //which coordinate do you want to consider for elem? top left? center? mouse position?  .... this does the midpoint\n              var elem_x =  scope.draggedElement.elem.offsetLeft + scope.draggedElement.elem.offsetWidth/2\n              var elem_y =  scope.draggedElement.elem.offsetTop + scope.draggedElement.elem.offsetHeight/2\n\n              for(var i=0;i<allElems.length;i++){\n                if(i==prevOffset)continue;//don't consider yourself\n\n                var x_lo = allElems[i].offsetLeft\n                var x_hi = allElems[i].offsetLeft + allElems[i].offsetWidth\n                var y_lo = allElems[i].offsetTop\n                var y_hi = allElems[i].offsetTop + allElems[i].offsetHeight\n\n                //it's the end of the list OR the next one's upper bound is greater than current low bound\n                var end_of_line = i==allElems.length-1 || allElems[i+1].offsetTop > y_hi\n\n                //option 1: elem's position is inside the bounding box of this considered element\n                if(x_lo <= elem_x && elem_x <= x_hi && y_lo <= elem_y && elem_y <= y_hi ){\n                  newOffset=i;\n                  break;\n                }\n\n                //option 2: elem's y is within bounding box AND x is greater AND it's end of the line\n                if( y_lo <= elem_y && elem_y <= y_hi   && elem_x > x_hi && end_of_line){\n                  newOffset=i;\n                  break;\n                }\n\n                //option 3: the last line is empty, and you drop it there, so it has to consider the last element, and elem_y is higher than the y val\n                if(i==allElems.length-1 && elem_y > y_hi){\n                  newOffset=i;\n                  break;\n                }\n\n                //option 4: you drop it to the left of a guy that's on the beginning of the line\n                if((i==0 || allElems[i-1].offsetTop < y_lo) && y_lo < elem_y && elem_y <y_hi && elem_x < x_lo){\n                  newOffset=i;\n                  break;\n                }\n              }\n\n              if(prevOffset!=-1 && newOffset!=-1 && newOffset!=prevOffset){\n                //console.log('moving:'+prevOffset+\" to:\"+newOffset)\n                tagList.reorder(prevOffset,newOffset);\n              }\n\n              //undo the \"temp\" stuff to be ready for the next one ...\n              scope.draggedElement.elem.style.position='static'\n              scope.draggedElement.elem.style.left = '0px';\n              scope.draggedElement.elem.style.top = '0px';\n              scope.draggedElement = null\n            }\n          }\n        }\n      };\n\n      events\n        .on('tag-added', scope.onTagAdded)\n        .on('invalid-tag', scope.onInvalidTag)\n        .on('tag-removed', scope.onTagRemoved)\n        .on('tag-clicked', scope.onTagClicked)\n        .on('tag-dragged', scope.onTagDragged)\n        .on('tag-added', () => {\n          scope.newTag.text('');\n        })\n        .on('tag-added tag-removed', () => {\n          scope.tags = tagList.getItems();\n          // Ideally we should be able call $setViewValue here and let it in turn call $setDirty and $validate\n          // automatically, but since the model is an array, $setViewValue does nothing and it's up to us to do it.\n          // Unfortunately this won't trigger any registered $parser and there's no safe way to do it.\n          ngModelCtrl.$setDirty();\n          focusInput();\n        })\n        .on('invalid-tag', () => {\n          scope.newTag.invalid = true;\n        })\n        .on('option-change', e => {\n          if (validationOptions.indexOf(e.name) !== -1) {\n            setElementValidity();\n          }\n        })\n        .on('input-change', () => {\n          tagList.clearSelection();\n          scope.newTag.invalid = null;\n        })\n        .on('input-focus', () => {\n          element.triggerHandler('focus');\n          ngModelCtrl.$setValidity('leftoverText', true);\n        })\n        .on('input-blur', () => {\n          if (options.addOnBlur && !options.addFromAutocompleteOnly) {\n            tagList.addText(scope.newTag.text());\n          }\n          element.triggerHandler('blur');\n          setElementValidity();\n        })\n        .on('input-keydown', event => {\n          let key = event.keyCode;\n\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n            return;\n          }\n\n          let addKeys = {\n            [tiConstants.KEYS.enter]: options.addOnEnter,\n            [tiConstants.KEYS.comma]: options.addOnComma,\n            [tiConstants.KEYS.space]: options.addOnSpace\n          };\n\n          let shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n          let shouldRemove = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.delete) && tagList.selected;\n          let shouldEditLastTag = key === tiConstants.KEYS.backspace && scope.newTag.text().length === 0 && options.enableEditingLastTag;\n          let shouldSelect = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.left || key === tiConstants.KEYS.right) &&\n            scope.newTag.text().length === 0 && !options.enableEditingLastTag;\n\n          if (shouldAdd) {\n            tagList.addText(scope.newTag.text());\n          }\n          else if (shouldEditLastTag) {\n            tagList.selectPrior();\n            tagList.removeSelected().then(tag => {\n              if (tag) {\n                scope.newTag.text(tag[options.displayProperty]);\n              }\n            });\n          }\n          else if (shouldRemove) {\n            tagList.removeSelected();\n          }\n          else if (shouldSelect) {\n            if (key === tiConstants.KEYS.left || key === tiConstants.KEYS.backspace) {\n              tagList.selectPrior();\n            }\n            else if (key === tiConstants.KEYS.right) {\n              tagList.selectNext();\n            }\n          }\n\n          if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\n            event.preventDefault();\n          }\n        })\n        .on('input-paste', event => {\n          if (options.addOnPaste) {\n            let data = event.getTextData();\n            let tags = data.split(options.pasteSplitPattern);\n\n            if (tags.length > 1) {\n              tags.forEach(tag => {\n                tagList.addText(tag);\n              });\n              event.preventDefault();\n            }\n          }\n        });\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name tiTagItem\n * @module ngTagsInput\n *\n * @description\n * Represents a tag item. Used internally by the tagsInput directive.\n */\nexport default function TagItemDirective(tiUtil) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    require: '^tagsInput',\n    template: '<ng-include src=\"$$template\"></ng-include>',\n    scope: {\n      $scope: '=scope',\n      data: '='\n    },\n    link(scope, element, attrs, tagsInputCtrl) {\n      let tagsInput = tagsInputCtrl.registerTagItem();\n      let options = tagsInput.getOptions();\n\n      scope.$$template = options.template;\n      scope.$$removeTagSymbol = options.removeTagSymbol;\n\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty]);\n      scope.$removeTag = () => {\n        tagsInput.removeTag(scope.$index);\n      };\n\n      scope.$watch('$parent.$index', value => {\n        scope.$index = value;\n      });\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name autoComplete\n * @module ngTagsInput\n *\n * @description\n * Provides autocomplete support for the tagsInput directive.\n *\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n *    $query. The result of the expression must be a promise that eventually resolves to an array of strings.\n * @param {string=} [template=NA] URL or id of a custom template for rendering each element of the autocomplete list.\n * @param {string=} [displayProperty=tagsInput.displayText] Property to be rendered as the autocomplete label.\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n *    the source option after the last keystroke.\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n *    in the source option.\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n *    suggestions list.\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\n *    key is pressed and the suggestion list is closed. The current input value is available as $query.\n * @param {boolean=} [loadOnEmpty=false] Flag indicating that the source option will be evaluated when the input content\n *    becomes empty. The $query variable will be passed to the expression as an empty string.\n * @param {boolean=} [loadOnFocus=false] Flag indicating that the source option will be evaluated when the input element\n *    gains focus. The current input value is available as $query.\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\n *    the suggestion list is shown.\n * @param {expression=} [matchClass=NA] Expression to evaluate for each match in order to get the CSS classes to be used.\n *    The expression is provided with the current match as $match, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n */\nexport default function AutocompleteDirective($document, $timeout, $sce, $q, tagsInputConfig, tiUtil, tiConstants) {\n  'ngInject';\n\n  function SuggestionList(loadFn, options, events) {\n    let self = {};\n    let lastPromise = null;\n\n    let getTagId = () => options.tagsInput.keyProperty || options.tagsInput.displayProperty;\n\n    let getDifference = function(array1, array2) {\n      return array1.filter(item => !tiUtil.findInObjectArray(array2, item, getTagId(), (a, b) =>{\n        if (options.tagsInput.replaceSpacesWithDashes) {\n          a = tiUtil.replaceSpacesWithDashes(a);\n          b = tiUtil.replaceSpacesWithDashes(b);\n        }\n        return tiUtil.defaultComparer(a, b);\n      }));\n    };\n\n    self.reset = () => {\n      lastPromise = null;\n\n      self.items = [];\n      self.visible = false;\n      self.index = -1;\n      self.selected = null;\n      self.query = null;\n    };\n\n    self.show = () => {\n      if (options.selectFirstMatch) {\n        self.select(0);\n      }\n      else {\n        self.selected = null;\n      }\n      self.visible = true;\n    };\n\n    self.load = tiUtil.debounce((query, tags) => {\n      self.query = query;\n\n      let promise = $q.when(loadFn({ $query: query }));\n      lastPromise = promise;\n\n      promise.then(items => {\n        if (promise !== lastPromise) {\n          return;\n        }\n\n        items = tiUtil.makeObjectArray(items.data || items, getTagId());\n        items = getDifference(items, tags);\n        self.items = items.slice(0, options.maxResultsToShow);\n\n        if (self.items.length > 0) {\n          self.show();\n        }\n        else {\n          self.reset();\n        }\n      });\n    }, options.debounceDelay);\n\n    self.selectNext = () => {\n      self.select(++self.index);\n    };\n\n    self.selectPrior = () => {\n      self.select(--self.index);\n    };\n\n    self.select = index => {\n      if (index < 0) {\n        index = self.items.length - 1;\n      }\n      else if (index >= self.items.length) {\n        index = 0;\n      }\n      self.index = index;\n      self.selected = self.items[index];\n      events.trigger('suggestion-selected', index);\n    };\n\n    self.reset();\n\n    return self;\n  }\n\n  function scrollToElement(root, index) {\n    let element = root.find('li').eq(index);\n    let parent = element.parent();\n    let elementTop = element.prop('offsetTop');\n    let elementHeight = element.prop('offsetHeight');\n    let parentHeight = parent.prop('clientHeight');\n    let parentScrollTop = parent.prop('scrollTop');\n\n    if (elementTop < parentScrollTop) {\n      parent.prop('scrollTop', elementTop);\n    }\n    else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\n      parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    require: '^tagsInput',\n    scope: {\n      source: '&',\n      matchClass: '&'\n    },\n    templateUrl: 'ngTagsInput/auto-complete.html',\n    controller($scope, $element, $attrs) {\n      'ngInject';\n\n      $scope.events = tiUtil.simplePubSub();\n\n      $scope.options = tagsInputConfig.load('autoComplete', $element, $attrs, $scope.events, {\n        template: [String, 'ngTagsInput/auto-complete-match.html'],\n        debounceDelay: [Number, 100],\n        minLength: [Number, 3],\n        highlightMatchedText: [Boolean, true],\n        maxResultsToShow: [Number, 10],\n        loadOnDownArrow: [Boolean, false],\n        loadOnEmpty: [Boolean, false],\n        loadOnFocus: [Boolean, false],\n        selectFirstMatch: [Boolean, true],\n        displayProperty: [String, '']\n      });\n\n      $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\n\n      this.registerAutocompleteMatch = () => ({\n        getOptions: function () {\n          return $scope.options;\n        },\n        getQuery: function () {\n          return $scope.suggestionList.query;\n        }\n      });\n    },\n    link(scope, element, attrs, tagsInputCtrl) {\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.tab, tiConstants.KEYS.escape, tiConstants.KEYS.up, tiConstants.KEYS.down];\n      let suggestionList = scope.suggestionList;\n      let tagsInput = tagsInputCtrl.registerAutocomplete();\n      let options = scope.options;\n      let events = scope.events;\n\n      options.tagsInput = tagsInput.getOptions();\n\n      let shouldLoadSuggestions = value => value && value.length >= options.minLength || !value && options.loadOnEmpty;\n\n      scope.templateScope = tagsInput.getTemplateScope();\n\n      scope.addSuggestionByIndex = index => {\n        suggestionList.select(index);\n        scope.addSuggestion();\n      };\n\n      scope.addSuggestion = () => {\n        let added = false;\n\n        if (suggestionList.selected) {\n          tagsInput.addTag(angular.copy(suggestionList.selected));\n          suggestionList.reset();\n          added = true;\n        }\n        return added;\n      };\n\n      scope.track = item => item[options.tagsInput.keyProperty || options.tagsInput.displayProperty];\n\n      scope.getSuggestionClass = (item, index) => {\n        let selected = item === suggestionList.selected;\n        return [\n          scope.matchClass({$match: item, $index: index, $selected: selected}),\n                    { selected: selected }\n        ];\n      };\n\n      tagsInput\n        .on('tag-added tag-removed invalid-tag input-blur', () => {\n          suggestionList.reset();\n        })\n        .on('input-change', value => {\n          if (shouldLoadSuggestions(value)) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n          else {\n            suggestionList.reset();\n          }\n        })\n        .on('input-focus', () => {\n          let value = tagsInput.getCurrentTagText();\n          if (options.loadOnFocus && shouldLoadSuggestions(value)) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n        })\n        .on('input-keydown', event => {\n          let key = event.keyCode;\n          let handled = false;\n\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n            return;\n          }\n\n          if (suggestionList.visible) {\n\n            if (key === tiConstants.KEYS.down) {\n              suggestionList.selectNext();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.up) {\n              suggestionList.selectPrior();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.escape) {\n              suggestionList.reset();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.enter || key === tiConstants.KEYS.tab) {\n              handled = scope.addSuggestion();\n            }\n          }\n          else {\n            if (key === tiConstants.KEYS.down && scope.options.loadOnDownArrow) {\n              suggestionList.load(tagsInput.getCurrentTagText(), tagsInput.getTags());\n              handled = true;\n            }\n          }\n\n          if (handled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            return false;\n          }\n        });\n\n      events.on('suggestion-selected', index => {\n        scrollToElement(element, index);\n      });\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name tiAutocompleteMatch\n * @module ngTagsInput\n *\n * @description\n * Represents an autocomplete match. Used internally by the autoComplete directive.\n */\nexport default function AutocompleteMatchDirective($sce, tiUtil) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    require: '^autoComplete',\n    template: '<ng-include src=\"$$template\"></ng-include>',\n    scope: {\n      $scope: '=scope',\n      data: '='\n    },\n    link(scope, element, attrs, autoCompleteCtrl) {\n      let autoComplete = autoCompleteCtrl.registerAutocompleteMatch();\n      let options = autoComplete.getOptions();\n\n      scope.$$template = options.template;\n      scope.$index = scope.$parent.$index;\n\n      scope.$highlight = text => {\n        if (options.highlightMatchedText) {\n          text = tiUtil.safeHighlight(text, autoComplete.getQuery());\n        }\n        return $sce.trustAsHtml(text);\n      };\n\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty || options.tagsInput.displayProperty]);\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name tiAutosize\n * @module ngTagsInput\n *\n * @description\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n */\nexport default function AutosizeDirective(tagsInputConfig) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link(scope, element, attrs, ctrl) {\n      let threshold = tagsInputConfig.getTextAutosizeThreshold();\n      let span = angular.element('<span class=\"input\"></span>');\n\n      span.css('display', 'none')\n          .css('visibility', 'hidden')\n          .css('width', 'auto')\n          .css('white-space', 'pre');\n\n      element.parent().append(span);\n\n      let resize = originalValue => {\n        let value = originalValue;\n        let width;\n\n        if (angular.isString(value) && value.length === 0) {\n          value = attrs.placeholder;\n        }\n\n        if (value) {\n          span.text(value);\n          span.css('display', '');\n          width = span.prop('offsetWidth');\n          span.css('display', 'none');\n        }\n\n        element.css('width', width ? width + threshold + 'px' : '');\n\n        return originalValue;\n      };\n\n      ctrl.$parsers.unshift(resize);\n      ctrl.$formatters.unshift(resize);\n\n      attrs.$observe('placeholder', value => {\n        if (!ctrl.$modelValue) {\n          resize(value);\n        }\n      });\n    }\n  };\n}","/**\n * @ngdoc directive\n * @name tiBindAttrs\n * @module ngTagsInput\n *\n * @description\n * Binds attributes to expressions. Used internally by tagsInput directive.\n */\nexport default function BindAttributesDirective() {\n  return (scope, element, attrs) => {\n    scope.$watch(attrs.tiBindAttrs, value => {\n      angular.forEach(value, (value, key) => {\n        attrs.$set(key, value);\n      });\n    }, true);\n  };\n}","/**\n * @ngdoc directive\n * @name tiTranscludeAppend\n * @module ngTagsInput\n *\n * @description\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n */\nexport default function TranscludeAppendDirective() {\n  return (scope, element, attrs, ctrl, transcludeFn) => {\n    transcludeFn(clone => {\n      element.append(clone);\n    });\n  };\n}","/**\n * @ngdoc service\n * @name tagsInputConfig\n * @module ngTagsInput\n *\n * @description\n * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n *  initialize options from HTML attributes.\n */\nexport default function TagsInputConfigurationProvider() {\n  'ngInject';\n\n  let globalDefaults = {};\n  let interpolationStatus = {};\n  let autosizeThreshold = 3;\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setDefaults\n   * @description Sets the default configuration option for a directive.\n   *\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n   * @param {object} defaults Object containing options and their values.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setDefaults = (directive, defaults) => {\n    globalDefaults[directive] = defaults;\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setActiveInterpolation\n   * @description Sets active interpolation for a set of options.\n   *\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n   * @param {object} options Object containing which options should have interpolation turned on at all times.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setActiveInterpolation = (directive, options) => {\n    interpolationStatus[directive] = options;\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setTextAutosizeThreshold\n   * @description Sets the threshold used by the tagsInput directive to re-size the inner input field element based on its contents.\n   *\n   * @param {number} threshold Threshold value, in pixels.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setTextAutosizeThreshold = threshold => {\n    autosizeThreshold = threshold;\n    return this;\n  };\n\n  this.$get = $interpolate => {\n    'ngInject';\n\n    let converters = {\n      [String]: value => value.toString(),\n      [Number]: value => parseInt(value, 10),\n      [Boolean]: value => value.toLowerCase() === 'true',\n      [RegExp]: value => new RegExp(value)\n    };\n\n    return {\n      load(directive, element, attrs, events, optionDefinitions) {\n        let defaultValidator = () => true;\n        let options = {};\n\n        angular.forEach(optionDefinitions, (value, key) => {\n          let type = value[0];\n          let localDefault = value[1];\n          let validator = value[2] || defaultValidator;\n          let converter = converters[type];\n\n          let getDefault = () => {\n            let globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n            return angular.isDefined(globalValue) ? globalValue : localDefault;\n          };\n\n          let updateValue = value => {\n            options[key] = value && validator(value) ? converter(value) : getDefault();\n          };\n\n          if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n            attrs.$observe(key, value => {\n              updateValue(value);\n              events.trigger('option-change', { name: key, newValue: value });\n            });\n          }\n          else {\n            updateValue(attrs[key] && $interpolate(attrs[key])(element.scope()));\n          }\n        });\n\n        return options;\n      },\n      getTextAutosizeThreshold() {\n        return autosizeThreshold;\n      }\n    };\n  };\n}\n","/***\n * @ngdoc service\n * @name tiUtil\n * @module ngTagsInput\n *\n * @description\n * Helper methods used internally by the directive. Should not be called directly from user code.\n */\nexport default function UtilService($timeout, $q) {\n  'ngInject';\n\n  let self = {};\n\n  self.debounce = (fn, delay) => {\n    let timeoutId;\n    return function(...args) {\n      $timeout.cancel(timeoutId);\n      timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\n    };\n  };\n\n  self.makeObjectArray = (array, key) => {\n    if (!angular.isArray(array) || array.length === 0 || angular.isObject(array[0])) {\n      return array;\n    }\n\n    return array.map(item => ({ [key]: item }));\n  };\n\n  self.findInObjectArray = (array, obj, key, comparer) => {\n    let item = null;\n    comparer = comparer || self.defaultComparer;\n\n    array.some(element => {\n      if (comparer(element[key], obj[key])) {\n        item = element;\n        return true;\n      }\n    });\n\n    return item;\n  };\n\n  self.defaultComparer = (a, b) => {\n    // I'm aware of the internationalization issues regarding toLowerCase()\n    // but I couldn't come up with a better solution right now\n    return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\n  };\n\n  self.safeHighlight = (str, value) => {\n    str = self.encodeHTML(str);\n    value = self.encodeHTML(value);\n\n    if (!value) {\n      return str;\n    }\n\n    let escapeRegexChars = str => str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    let expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\n\n    return str.replace(expression, match => match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match);\n  };\n\n  self.safeToString = value => angular.isUndefined(value) || value === null ? '' : value.toString().trim();\n\n  self.encodeHTML = value => self.safeToString(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n  self.handleUndefinedResult = (fn, valueIfUndefined) => {\n    return function () {\n      let result = fn.apply(null, arguments);\n      return angular.isUndefined(result) ? valueIfUndefined : result;\n    };\n  };\n\n  self.replaceSpacesWithDashes = str => self.safeToString(str).replace(/\\s/g, '-');\n\n  self.isModifierOn = event => event.shiftKey || event.ctrlKey || event.altKey || event.metaKey;\n\n  self.promisifyValue = value => {\n    value = angular.isUndefined(value) ? true : value;\n    return $q[value ? 'when' : 'reject']();\n  };\n\n  self.simplePubSub = function() {\n    let events = {};\n    return {\n      on(names, handler, first) {\n        names.split(' ').forEach(name => {\n          if (!events[name]) {\n            events[name] = [];\n          }\n          let method = first ? [].unshift : [].push;\n          method.call(events[name], handler);\n        });\n        return this;\n      },\n      trigger(name, args) {\n        let handlers = events[name] || [];\n        handlers.every(handler => self.handleUndefinedResult(handler, true)(args));\n        return this;\n      }\n    };\n  };\n\n  return self;\n}\n","/*@ngInject*/\nexport default function TemplateCacheRegister($templateCache) {\n    $templateCache.put('ngTagsInput/auto-complete-match.html',\n    \"<span ng-bind-html=\\\"$highlight($getDisplayText())\\\"></span>\"\n  );\n  $templateCache.put('ngTagsInput/auto-complete.html',\n    \"<div class=\\\"autocomplete\\\" ng-if=\\\"suggestionList.visible\\\"><ul class=\\\"suggestion-list\\\"><li class=\\\"suggestion-item\\\" ng-repeat=\\\"item in suggestionList.items track by track(item)\\\" ng-class=\\\"getSuggestionClass(item, $index)\\\" ng-click=\\\"addSuggestionByIndex($index)\\\" ng-mouseenter=\\\"suggestionList.select($index)\\\"><ti-autocomplete-match scope=\\\"templateScope\\\" data=\\\"::item\\\"></ti-autocomplete-match></li></ul></div>\"\n  );\n  $templateCache.put('ngTagsInput/tag-item.html',\n    \"<span ng-bind=\\\"$getDisplayText()\\\"></span> <a class=\\\"remove-button\\\" ng-click=\\\"$removeTag()\\\" ng-bind=\\\"::$$removeTagSymbol\\\"></a>\"\n  );\n  $templateCache.put('ngTagsInput/tags-input.html',\n    \"<div class=\\\"host\\\" tabindex=\\\"-1\\\" ng-click=\\\"eventHandlers.host.click()\\\" ng-mousemove=\\\"eventHandlers.host.mousemove($event)\\\" ti-transclude-append><div class=\\\"tags\\\" ng-class=\\\"{focused: hasFocus}\\\"><ul class=\\\"tag-list\\\"><li class=\\\"tag-item\\\" ng-repeat=\\\"tag in tagList.items track by track(tag)\\\" ng-class=\\\"getTagClass(tag, $index)\\\" ng-click=\\\"eventHandlers.tag.click(tag)\\\" ng-mousedown=\\\"eventHandlers.tag.mousedown($event)\\\" ng-mouseup=\\\"eventHandlers.tag.mouseup($event)\\\"><ti-tag-item scope=\\\"templateScope\\\" data=\\\"::tag\\\"></ti-tag-item></li></ul><input class=\\\"input\\\" autocomplete=\\\"off\\\" ng-model=\\\"newTag.text\\\" ng-model-options=\\\"{getterSetter: true}\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-focus=\\\"eventHandlers.input.focus($event)\\\" ng-blur=\\\"eventHandlers.input.blur($event)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-trim=\\\"false\\\" ng-class=\\\"{'invalid-tag': newTag.invalid}\\\" ng-disabled=\\\"disabled\\\" ti-bind-attrs=\\\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}\\\" ti-autosize></div></div>\"\n  );\n}","import * as angular from 'angular';\nimport Constants from './constants';\nimport TagsInputDirective from './tags-input';\nimport TagItemDirective from './tag-item';\nimport AutocompleteDirective from './auto-complete';\nimport AutocompleteMatchDirective from './auto-complete-match';\nimport AutosizeDirective from './autosize';\nimport BindAttributesDirective from './bind-attrs';\nimport TranscludeAppendDirective from './transclude-append';\nimport TagsInputConfigurationProvider from './configuration';\nimport UtilService from './util';\nimport TemplateCacheRegister from 'compiled-templates';\n\nangular.module('ngTagsInput', [])\n    .directive('tagsInput', TagsInputDirective)\n    .directive('tiTagItem', TagItemDirective)\n    .directive('autoComplete', AutocompleteDirective)\n    .directive('tiAutocompleteMatch', AutocompleteMatchDirective)\n    .directive('tiAutosize', AutosizeDirective)\n    .directive('tiBindAttrs', BindAttributesDirective)\n    .directive('tiTranscludeAppend', TranscludeAppendDirective)\n    .factory('tiUtil', UtilService)\n    .constant('tiConstants', Constants)\n    .provider('tagsInputConfig', TagsInputConfigurationProvider)\n    .run(TemplateCacheRegister);"],"names":["TagsInputDirective","$timeout","$document","$window","$q","tagsInputConfig","tiUtil","tiConstants","TagList","options","events","onTagAdding","onTagRemoving","self","getTagText","safeToString","tag","displayProperty","setTagText","text","canAddTag","tagText","valid","length","minLength","maxLength","allowedTagsPattern","test","findInObjectArray","items","keyProperty","when","$tag","then","promisifyValue","canRemoveTag","addText","add","replaceSpacesWithDashes","push","trigger","catch","remove","index","splice","clearSelection","reorder","prevOffset","newOffset","select","selected","selectPrior","selectNext","removeSelected","getItems","useStrings","map","validateType","type","SUPPORTED_INPUT_TYPES","indexOf","$scope","$element","$attrs","simplePubSub","load","String","Number","fromCharCode","Boolean","MAX_SAFE_INTEGER","RegExp","tagList","handleUndefinedResult","registerAutocomplete","newTag","templateScope","name","handler","on","registerTagItem","disabled","scope","element","attrs","ngModelCtrl","hotkeys","KEYS","enter","comma","space","backspace","delete","left","right","input","find","validationOptions","setElementValidity","$setValidity","maxTags","minTags","hasFocus","allowLeftoverText","focusInput","focus","$isEmpty","value","angular","isDefined","track","getTagClass","ret","tagClass","$index","$selected","dragtag","$watch","makeObjectArray","tags","$validate","$observe","eventHandlers","$event","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","getTextData","clipboardData","originalEvent","getData","event","draggedElement","zoomFactor","window","innerWidth","outerWidth","elem","style","screenX","x","top","screenY","y","target","srcElement","currentTarget","tagName","parentElement","position","preventDefault","stopImmediatePropagation","listHolder","allElems","getElementsByTagName","i","elem_x","offsetLeft","offsetWidth","elem_y","offsetTop","offsetHeight","x_lo","x_hi","y_lo","y_hi","end_of_line","onTagAdded","onInvalidTag","onTagRemoved","onTagClicked","onTagDragged","$setDirty","invalid","e","triggerHandler","addOnBlur","addFromAutocompleteOnly","key","keyCode","isModifierOn","addKeys","addOnEnter","addOnComma","addOnSpace","shouldAdd","shouldRemove","shouldEditLastTag","enableEditingLastTag","shouldSelect","addOnPaste","data","split","pasteSplitPattern","forEach","TagItemDirective","tagsInputCtrl","tagsInput","getOptions","$$template","template","$$removeTagSymbol","removeTagSymbol","$getDisplayText","$removeTag","removeTag","AutocompleteDirective","$sce","SuggestionList","loadFn","lastPromise","getTagId","getDifference","array1","array2","filter","item","a","b","defaultComparer","reset","visible","query","show","selectFirstMatch","debounce","promise","$query","slice","maxResultsToShow","debounceDelay","scrollToElement","root","eq","parent","elementTop","elementHeight","parentHeight","parentScrollTop","suggestionList","source","registerAutocompleteMatch","tab","escape","up","down","shouldLoadSuggestions","loadOnEmpty","getTemplateScope","addSuggestionByIndex","addSuggestion","added","addTag","copy","getSuggestionClass","matchClass","$match","getTags","getCurrentTagText","loadOnFocus","handled","loadOnDownArrow","AutocompleteMatchDirective","autoCompleteCtrl","autoComplete","$parent","$highlight","highlightMatchedText","safeHighlight","getQuery","trustAsHtml","AutosizeDirective","ctrl","threshold","getTextAutosizeThreshold","span","css","append","resize","originalValue","width","isString","placeholder","$parsers","unshift","$formatters","$modelValue","BindAttributesDirective","tiBindAttrs","$set","TranscludeAppendDirective","transcludeFn","clone","TagsInputConfigurationProvider","globalDefaults","interpolationStatus","autosizeThreshold","setDefaults","directive","defaults","setActiveInterpolation","setTextAutosizeThreshold","$get","converters","toString","parseInt","toLowerCase","optionDefinitions","defaultValidator","localDefault","validator","converter","getDefault","globalValue","updateValue","newValue","$interpolate","UtilService","fn","delay","timeoutId","args","cancel","apply","array","isArray","isObject","obj","comparer","some","str","encodeHTML","escapeRegexChars","replace","expression","match","isUndefined","trim","valueIfUndefined","result","arguments","shiftKey","ctrlKey","altKey","metaKey","names","first","method","call","handlers","every","TemplateCacheRegister","$templateCache","put","factory","constant","Constants","provider","run"],"mappings":"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"}